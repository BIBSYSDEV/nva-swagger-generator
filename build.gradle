/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
}

repositories {
    gradlePluginPortal()
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

java {
    // added to ensure Compatibility in dev mode for devs with java versions > 11
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
}

dependencies {
    api 'org.apache.commons:commons-math3:3.6.1'
    api 'org.apache.commons:commons-text:1.9'
    api 'org.apache.commons:commons-compress:1.22'

    implementation libs.aws.java.sdk.core

    implementation libs.aws.sdk2.eventbridge
    implementation libs.aws.sdk2.regions
    implementation libs.aws.sdk2.s3
    implementation libs.aws.sdk2.urlconnectionclient
    implementation libs.aws.sdk2.cognitoidentityprovider
    implementation libs.aws.sdk2.apigateway

    implementation libs.bundles.jackson
    implementation libs.bundles.logging
    implementation libs.bundles.nva

    implementation libs.jacoco.core
    implementation libs.jacoco.report
    implementation libs.json
    implementation libs.jsonld

    implementation libs.swagger.core
    implementation libs.swagger.parser

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    implementation libs.mockito.core

    implementation libs.nebula.lint
    implementation libs.nva.json
    implementation libs.nva.s3
    testImplementation libs.bundles.testing
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}


pmd {
    consoleOutput = true
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
}

test {
    environment "OUTPUT_BUCKET_NAME", "notimportant"
    environment "API_HOST", "localhost"

    useJUnitPlatform {}
    failFast = false
    testLogging {
        events 'skipped', 'passed', 'failed'
        showCauses true
        exceptionFormat "full"
    }

    finalizedBy jacocoTestReport
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
}


tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}