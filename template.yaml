AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Swagger Documentation Generator

Parameters:
  CustomDomain:
    Type: String
    Description: The custom domain for the enviorment
  SwaggerDomainCertificateArn:
    Type: String
    Description: ARN for the certificate covering the swagger documentation.

Globals:
  Function:
    Timeout: 60
    MemorySize: 1800
    Environment:
      Variables:
        DOMAIN: !Ref CustomDomain
        EXCLUDED_APIS: "NVA Courses API,DLR LaunchCanvas API"
        EXTERNAL_CLOUD_FRONT_DISTRIBUTION: !Ref ExternalCloudfrontDistribution
        INTERNAL_CLOUD_FRONT_DISTRIBUTION: !Ref InternalCloudfrontDistribution
        EXTERNAL_BUCKET_NAME: !Ref ExternalSwaggerUiBucket
        INTERNAL_BUCKET_NAME: !Ref InternalSwaggerUiBucket

Resources:
  SwaggerGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readWriteApigateway
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:POST
                  - apigateway:PATCH
                  - apigateway:DELETE
                Resource: '*'
        - PolicyName: readWriteS3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${InternalSwaggerUiBucket}'
                  - !Sub 'arn:aws:s3:::${InternalSwaggerUiBucket}/*'
                  - !Sub 'arn:aws:s3:::${ExternalSwaggerUiBucket}'
                  - !Sub 'arn:aws:s3:::${ExternalSwaggerUiBucket}/*'
        - PolicyName: invalidateCloudFront
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cloudfront:CreateInvalidation
                Resource:
                  - '*'

  ExternalSwaggerUiBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'nva-swagger-ui-external-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: "index.html"
  InternalSwaggerUiBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'nva-swagger-ui-internal-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: "index.html"

  ExternalSwaggerUiBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ExternalSwaggerUiBucket
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${ExternalSwaggerUiBucket}/*

  InternalSwaggerUiBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InternalSwaggerUiBucket
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${InternalSwaggerUiBucket}/*

  CleanupExternalBucketOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CleanupSwaggerUiBucketOnDeleteLambda"
          - "Arn"
      BucketName: !Ref ExternalSwaggerUiBucketPolicy

  CleanupInternalBucketOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CleanupSwaggerUiBucketOnDeleteLambda"
          - "Arn"
      BucketName: !Ref InternalSwaggerUiBucket

  CleanupSwaggerUiBucketOnDeleteLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - ExternalSwaggerUiBucket
      - InternalSwaggerUiBucket
    Properties:
      Code:
        ZipFile:
          !Sub |
          import json, boto3, logging
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  logger.info("bucket: {}, event['RequestType']: {}".format(bucket,event['RequestType']))
                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket)
                      for obj in bucket.objects.filter():
                          logger.info("delete obj: {}".format(obj))
                          s3.Object(bucket.name, obj.key).delete()
          
                  sendResponseCfn(event, context, cfnresponse.SUCCESS)
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  sendResponseCfn(event, context, cfnresponse.FAILED)
          
          def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
      Handler: "index.lambda_handler"
      Runtime: python3.7
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt SwaggerGeneratorRole.Arn

  GenerateDocsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: Handler for generating swagger documentation
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
      Handler: no.sikt.generator.handlers.GenerateDocsHandler::handleRequest
      Runtime: java11
      Role: !GetAtt SwaggerGeneratorRole.Arn
      Timeout: 600
      Events:
        GenerateDocsScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: rate(12 hours)

  InstallSwaggerUiHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: Handler for installing newest swagger-ui to swagger s3 bucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
      Handler: no.sikt.generator.handlers.InstallSwaggerUiHandler::handleRequest
      Runtime: java11
      Timeout: 300
      Role: !GetAtt SwaggerGeneratorRole.Arn

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  ExternalCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: ExternalSwaggerUiBucket
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: 'swagger-ui-bucket-external'
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        Comment: !Sub 'Swagger-ui-external ${AWS::StackName}'
        Aliases:
          - !Sub 'swagger-ui.${CustomDomain}'
        Origins:
          - Id: 'swagger-ui-bucket-external'
            DomainName: !Sub "${ExternalSwaggerUiBucket}.s3.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: match-viewer
        ViewerCertificate:
          AcmCertificateArn: !Ref SwaggerDomainCertificateArn
          SslSupportMethod: 'sni-only'

  InternalCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: InternalSwaggerUiBucket
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: 'swagger-ui-bucket-internal'
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        Comment: !Sub 'Swagger-ui-internal ${AWS::StackName}'
        Aliases:
          - !Sub 'swagger-ui-internal.${CustomDomain}'
        Origins:
          - Id: 'swagger-ui-bucket-internal'
            DomainName: !Sub "${InternalSwaggerUiBucket}.s3.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: match-viewer
        ViewerCertificate:
          AcmCertificateArn: !Ref SwaggerDomainCertificateArn
          SslSupportMethod: 'sni-only'