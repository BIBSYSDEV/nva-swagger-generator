openapi: "3.0.0"
info:
  version: 1.0.0
  title: NVA API Dokumentasjon
  description: |-
    ## Om NVA
    
    Nasjonalt vitenarkiv (NVA) samler informasjon om norsk forskning og gjør forskningsresultater og forskningsinformasjon åpent tilgjengelig.

    Med NVA får norske forskningsinstitusjoner en tjeneste for å:

    - Innfri krav om åpen tilgang til artikler og andre forskningsresultater gjennom deponering i et åpent vitenarkiv
    - Selv publisere rapporter, studentoppgaver og annet materiale produsert ved institusjonen
    
    NVA utvikles også til bruk ved rapportering av vitenskapelig publisering til Kunnskapsdepartementet og Helse- og omsorgsdepartementet (NVI-rapportering), og for andre forskningsadministrative oppgaver.

    Sikt er databehandler. Den enkelte Institusjon er behandlingsansvarlig og registrerer og vedlikeholder eget innhold i tjenesten og konfigurerer distribusjonsregler for publiserte ressurser (artikler, rapporter, datasett etc.). Tjenesten får også overført innhold fra andre datakilder.

    NVA har støtte for utsatt publisering av ressurser. Det betyr at en registrering kan ferdigstilles slik at metadata om ressursen blir publisert, mens ressursen ikke blir åpent tilgjengelig før angitt dato. Tjenesten tillater ikke behandling av sensitive personopplysninger.

    NVA vil tilgjengeliggjøre institusjonens åpne innhold via åpne grensesnitt, med hensikt å gjøre dette kjent og søkbart for omverdenen og fremme indeksering i søkemotorer og søkeportaler.

    Selv om NVA er etablert og i bruk av flere institusjoner, vil tjenesten være i kontinuerlig utvikling i hele sin levetid. Institusjoner som ikke har et vitenarkiv kan kontakte Sikt for å få ta i bruk NVA som pilotinstitusjon.
    
    ## Bruk av APIet
    
    Ta kontakt for å få tildelt API-bruker. En bruker består av en ID og en Secret ([Client Credentials](https://oauth.net/2/grant-types/client-credentials/)) som kan benyttes til å generere en token mot [https://nva-prod-ext.auth.eu-west-1.amazoncognito.com/oauth2/token](https://nva-prod-ext.auth.eu-west-1.amazoncognito.com/oauth2/token).
    Bruk Basic Auth med ID som username, Secret som password, og leg ved 'grant_type=client_credentials' i body. Eksempel på CURL:
    ```
    curl --location --request POST 'https://nva-prod-ext.auth.eu-west-1.amazoncognito.com/oauth2/token' \
    -u "<id>:<secret>" \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'grant_type=client_credentials'
    ```
    En vil da få en JSON respons tilbake som inneholder en 'access_token'. Dette er en bearer token som varer i 15min
    
    ## Dataformat

    The data is reformatted as JSON-LD with a schema defined in the [search ontology](https://bibsysdev.github.io/src/search-ontology.ttl) and the [publication channel ontology](https://bibsysdev.github.io/src/publication-channel-ontology.ttl).

    To understand the semantic layer, take a look at the @context URI returned by the API, the data is marked up according to this and may be interpreted directly to RDF using this.
    
    ## Common usecases
    <details>
      <summary>Create publication with uploaded file</summary>

      ### Create publication with uploaded file
      To create a publication with a file we need to perform a series of steps. First we need to upload a file and get its identifier/location. Then we need to create a or update a publication that has the "associatedArtifacts" field referencing the file.
    
      #### Uploading the file
      The file can be uploaded by using the "NVA multipart upload API". This is a flexible API that support uploading a file in multiple parts, but in our example we will only use 1 part. 
    
      1. Create a Upload process by calling POST ../upload/create and store the returned  *uploadId* and *key*
      2. Get the upload URI by calling POST ../upload/prepare with the parameters from step 1:
            ```json 
            {
             "uploadId": "*****",
              "key": "****",
              "number": 1,
              "body": "{}"
            } 
            ``` 
            This returns a object with a *url* property.
      3. Do a PUT on the *url* with the file data
      4. Verify that the part was received and grab its *etag* by calling POST ../upload/listparts with the *uploadId* and *key* from step 1.
      5. Complete the upload by calling POST ../upload/complete with *uploadId*, *key* and the data returned by step 4:
            ```json 
            {
              "uploadId": "*****",
              "key": "****",
              "parts": [
                {
                    "PartNumber": "1",
                    "size": "3237",
                    "ETag": "***"
                }
            ]
            }
            ``` 
            This gives a *location* as response. Store this string as its needed later.
      #### Create the publication
      1. Do a POST ../publication with the location from earlier as identifier in associatedArtifacts:
          ```json 
          { 
            "associatedArtifacts": [{
              "type": "PublishedFile",
              "identifier": "****",
              "name": "sample.pdf",
              "size": 3028,
              "mimeType": "application/pdf",
              "administrativeAgreement": false,
              "publisherAuthority": null,
              "embargoDate": null,
              "license": null
            }],
            "type": "Publication",
            "entityDescription": {
              "mainTitle": "A publication with a file"
            }
          }
          ```
    
    
    </details>

  termsOfService: https://nva.unit.no/terms/
  contact:
    email: nva@unit.no
  license:
    name: MIT/NLOD 2.0
    url: https://link.to.license
externalDocs:
  description: Les mer om NVA
  url: https://nva.sikt.no/about
paths:
servers:
  - url: https://example.com/
