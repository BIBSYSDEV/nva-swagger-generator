openapi: 3.0.3
info:
  title: NVA Public Search API
  version: '0.2.0'
  description: Public search API for resources in NVA. The API is backed by Amazon OpenSearch and uses [OpenSearch query syntax](https://opensearch.org/docs/latest/opensearch/query-dsl/full-text/).
paths:

  /customer/import-candidates:
    get:
      description: "Search for import candidates by given criteria"
      parameters:
        - $ref: '#/components/parameters/additionalIdentifiersParam'
        - $ref: '#/components/parameters/additionalIdentifiersNotParam'
        - $ref: '#/components/parameters/categoryParam'
        - $ref: '#/components/parameters/categoryNotParam'
        - $ref: '#/components/parameters/createdDateParam'
        - $ref: '#/components/parameters/contributorParam'
        - $ref: '#/components/parameters/contributorNotParam'
        - $ref: '#/components/parameters/collaborationTypeParam'
        - $ref: '#/components/parameters/collaborationTypeNotParam'
        - $ref: '#/components/parameters/cristinIdentifierParam'
        - $ref: '#/components/parameters/doiParam'
        - $ref: '#/components/parameters/doiNotParam'
        - $ref: '#/components/parameters/fieldsParam'
        - $ref: '#/components/parameters/hasFileParam'
        - $ref: '#/components/parameters/fromParam'
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/idNotParam'
        - $ref: '#/components/parameters/importStatusParam'
        - $ref: '#/components/parameters/importStatusNotParam'
        - $ref: '#/components/parameters/langParam'
        - $ref: '#/components/parameters/licenseParam'
        - $ref: '#/components/parameters/licenseNotParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/publicationYearParam'
        - $ref: '#/components/parameters/publicationYearBeforeParam'
        - $ref: '#/components/parameters/publicationYearSinceParam'
        - $ref: '#/components/parameters/publisherParam'
        - $ref: '#/components/parameters/publisherNotParam'
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/scopusIdentifierParam'
        - $ref: '#/components/parameters/sizeParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/topLevelOrganizationParam'
        - $ref: '#/components/parameters/topLevelOrganizationNotParam'
        - $ref: '#/components/parameters/titleParam'
        - $ref: '#/components/parameters/titleNotParam'
        - $ref: '#/components/parameters/typeParam'
        - $ref: '#/components/parameters/typeNotParam'
        - $ref: '#/components/parameters/searchAllParam'
      security:
        - CognitoUserPool: [
          "https://api.nva.unit.no/scopes/backend",
          "https://api.nva.unit.no/scopes/frontend",
          "aws.cognito.signin.user.admin"
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchImportCandidatesAuthorizedFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedImportCandidateSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /customer/tickets:
    get:
      description: "Search for Tickets by customer"
      parameters:
        - $ref: '#/components/parameters/assigneeParam'
        - $ref: '#/components/parameters/assigneeNotParam'
        - $ref: '#/components/parameters/createdDateParam'
        - $ref: '#/components/parameters/customerIdParam'
        - $ref: '#/components/parameters/customerIdNotParam'
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/idNotParam'
        - $ref: '#/components/parameters/finalizedByParam'
        - $ref: '#/components/parameters/finalizedByNotParam'
        - $ref: '#/components/parameters/messagesParam'
        - $ref: '#/components/parameters/messagesNotParam'
        - $ref: '#/components/parameters/modifiedDateParam'
        - $ref: '#/components/parameters/organizationIdParam'
        - $ref: '#/components/parameters/organizationIdNotParam'
        - $ref: '#/components/parameters/ownerParam'
        - $ref: '#/components/parameters/ownerNotParam'
        - $ref: '#/components/parameters/publicationIdParam'
        - $ref: '#/components/parameters/publicationIdNotParam'
        - $ref: '#/components/parameters/publicationModifiedDateParam'
        - $ref: '#/components/parameters/publicationOwnerParam'
        - $ref: '#/components/parameters/publicationOwnerNotParam'
        - $ref: '#/components/parameters/publicationStatusParam'
        - $ref: '#/components/parameters/publicationStatusNotParam'
        - $ref: '#/components/parameters/publicationTitleParam'
        - $ref: '#/components/parameters/publicationTypeParam'
        - $ref: '#/components/parameters/publicationTypeNotParam'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/statusNotParam'
        - $ref: '#/components/parameters/typeParam'
        - $ref: '#/components/parameters/typeNotParam'
        - $ref: '#/components/parameters/viewedByParam'
        - $ref: '#/components/parameters/viewedByNotParam'
        - $ref: '#/components/parameters/fieldsParam'
        - $ref: '#/components/parameters/fromParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/sizeParam'
        - $ref: '#/components/parameters/sortParam'
      security:
        - CognitoUserPool: [
          "https://api.nva.unit.no/scopes/backend",
          "https://api.nva.unit.no/scopes/frontend",
          "aws.cognito.signin.user.admin"
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchTicketsAuthorizedFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /customer/resources:
    get:
      description: "Search for publications by customer"
      parameters:
        - $ref: '#/components/parameters/abstractNotParam'
        - $ref: '#/components/parameters/abstractParam'
        - $ref: '#/components/parameters/abstractShouldParam'
        - $ref: '#/components/parameters/categoryNotParam'
        - $ref: '#/components/parameters/categoryParam'
        - $ref: '#/components/parameters/categoryShouldParam'
        - $ref: '#/components/parameters/contextTypeNotParam'
        - $ref: '#/components/parameters/contextTypeParam'
        - $ref: '#/components/parameters/contextTypeShouldParam'
        - $ref: '#/components/parameters/contributorNameNotParam'
        - $ref: '#/components/parameters/contributorNameParam'
        - $ref: '#/components/parameters/contributorNameShouldParam'
        - $ref: '#/components/parameters/contributorNotParam'
        - $ref: '#/components/parameters/contributorParam'
        - $ref: '#/components/parameters/contributorShouldParam'
        - $ref: '#/components/parameters/courseNotParam'
        - $ref: '#/components/parameters/courseParam'
        - $ref: '#/components/parameters/courseShouldParam'
        - $ref: '#/components/parameters/createdBeforeParam'
        - $ref: '#/components/parameters/createdSinceParam'
        - $ref: '#/components/parameters/cristinIdentifierParam'
        - $ref: '#/components/parameters/doiNotParam'
        - $ref: '#/components/parameters/doiParam'
        - $ref: '#/components/parameters/doiShouldParam'
        - $ref: '#/components/parameters/fieldsParam'
        - $ref: '#/components/parameters/fromParam'
        - $ref: '#/components/parameters/fundingIdentifierNotParam'
        - $ref: '#/components/parameters/fundingIdentifierParam'
        - $ref: '#/components/parameters/fundingIdentifierShouldParam'
        - $ref: '#/components/parameters/fundingParam'
        - $ref: '#/components/parameters/fundingSourceNotParam'
        - $ref: '#/components/parameters/fundingSourceParam'
        - $ref: '#/components/parameters/fundingSourceShouldParam'
        - $ref: '#/components/parameters/grantIdentifierNotParam'
        - $ref: '#/components/parameters/grantIdentifierParam'
        - $ref: '#/components/parameters/grantIdentifierShouldParam'
        - $ref: '#/components/parameters/hasFileParam'
        - $ref: '#/components/parameters/idNotParam'
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/idShouldParam'
        - $ref: '#/components/parameters/instanceTypeNotParam'
        - $ref: '#/components/parameters/instanceTypeParam'
        - $ref: '#/components/parameters/instanceTypeShouldParam'
        - $ref: '#/components/parameters/institutionNotParam'
        - $ref: '#/components/parameters/institutionParam'
        - $ref: '#/components/parameters/institutionShouldParam'
        - $ref: '#/components/parameters/isbnNotParam'
        - $ref: '#/components/parameters/isbnParam'
        - $ref: '#/components/parameters/isbnShouldParam'
        - $ref: '#/components/parameters/issnNotParam'
        - $ref: '#/components/parameters/issnParam'
        - $ref: '#/components/parameters/issnShouldParam'
        - $ref: '#/components/parameters/langParam'
        - $ref: '#/components/parameters/licenseNotParam'
        - $ref: '#/components/parameters/licenseParam'
        - $ref: '#/components/parameters/licenseShouldParam'
        - $ref: '#/components/parameters/modifiedBeforeParam'
        - $ref: '#/components/parameters/modifiedSinceParam'
        - $ref: '#/components/parameters/orcidNotParam'
        - $ref: '#/components/parameters/orcidParam'
        - $ref: '#/components/parameters/orcidShouldParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/parentPublicationParam'
        - $ref: '#/components/parameters/parentPublicationShouldParam'
        - $ref: '#/components/parameters/projectNotParam'
        - $ref: '#/components/parameters/projectParam'
        - $ref: '#/components/parameters/projectShouldParam'
        - $ref: '#/components/parameters/publicationLanguageNotParam'
        - $ref: '#/components/parameters/publicationLanguageParam'
        - $ref: '#/components/parameters/publicationLanguageShouldParam'
        - $ref: '#/components/parameters/publicationYearBeforeParam'
        - $ref: '#/components/parameters/publicationYearParam'
        - $ref: '#/components/parameters/publicationYearShouldParam'
        - $ref: '#/components/parameters/publicationYearSinceParam'
        - $ref: '#/components/parameters/publishedBeforeParam'
        - $ref: '#/components/parameters/publishedBetweenParam'
        - $ref: '#/components/parameters/publishedSinceParam'
        - $ref: '#/components/parameters/publisherIdNotParam'
        - $ref: '#/components/parameters/publisherIdParam'
        - $ref: '#/components/parameters/publisherIdShouldParam'
        - $ref: '#/components/parameters/publisherNotParam'
        - $ref: '#/components/parameters/publisherParam'
        - $ref: '#/components/parameters/publisherShouldParam'
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/scientificReportingPeriodBeforeParam'
        - $ref: '#/components/parameters/scientificReportingPeriodSinceParam'
        - $ref: '#/components/parameters/scopusIdentifierParam'
        - $ref: '#/components/parameters/seriesNotParam'
        - $ref: '#/components/parameters/seriesParam'
        - $ref: '#/components/parameters/seriesShouldParam'
        - $ref: '#/components/parameters/sizeParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/statusNotParam'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/statusShouldParam'
        - $ref: '#/components/parameters/tagsNotParam'
        - $ref: '#/components/parameters/tagsParam'
        - $ref: '#/components/parameters/tagsShouldParam'
        - $ref: '#/components/parameters/titleNotParam'
        - $ref: '#/components/parameters/titleParam'
        - $ref: '#/components/parameters/titleShouldParam'
        - $ref: '#/components/parameters/topLevelOrganizationParam'
        - $ref: '#/components/parameters/unitNotParam'
        - $ref: '#/components/parameters/unitParam'
        - $ref: '#/components/parameters/unitShouldParam'
        - $ref: '#/components/parameters/userAffiliationNotParam'
        - $ref: '#/components/parameters/userAffiliationParam'
        - $ref: '#/components/parameters/userAffiliationShouldParam'
        - $ref: '#/components/parameters/userNotParam'
        - $ref: '#/components/parameters/userParam'
        - $ref: '#/components/parameters/userShouldParam'
      security:
        - CognitoUserPool: [
          "https://api.nva.unit.no/scopes/backend",
          "https://api.nva.unit.no/scopes/frontend",
          "aws.cognito.signin.user.admin"
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchResourcesAuthorizedFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedPublicationSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /resources:
    get:
      tags:
        - external
      description: '<h3>Search for public available publications by given criteria</h3>
      <p>All parameters documented with <code>snake_case</code>, but <code>camelCase</code> is also accepted. 
      They accept more than one value, each value must be separated by a <code>comma</code>. 
      If you use <code>space</code> between search phrases, it will usually be interpreted as words that should be found in the text.
      The more hits it gets, the closer to the top of search result an item will be.</p>'
      parameters:
        - $ref: '#/components/parameters/aggregationParam'
        - $ref: '#/components/parameters/abstractNotParam'
        - $ref: '#/components/parameters/abstractParam'
        - $ref: '#/components/parameters/abstractShouldParam'
        - $ref: '#/components/parameters/categoryNotParam'
        - $ref: '#/components/parameters/categoryParam'
        - $ref: '#/components/parameters/categoryShouldParam'
        - $ref: '#/components/parameters/contextTypeNotParam'
        - $ref: '#/components/parameters/contextTypeParam'
        - $ref: '#/components/parameters/contextTypeShouldParam'
        - $ref: '#/components/parameters/contributorNameNotParam'
        - $ref: '#/components/parameters/contributorNameParam'
        - $ref: '#/components/parameters/contributorNameShouldParam'
        - $ref: '#/components/parameters/contributorNotParam'
        - $ref: '#/components/parameters/contributorParam'
        - $ref: '#/components/parameters/contributorShouldParam'
        - $ref: '#/components/parameters/courseNotParam'
        - $ref: '#/components/parameters/courseParam'
        - $ref: '#/components/parameters/courseShouldParam'
        - $ref: '#/components/parameters/createdBeforeParam'
        - $ref: '#/components/parameters/createdSinceParam'
        - $ref: '#/components/parameters/cristinIdentifierParam'
        - $ref: '#/components/parameters/doiNotParam'
        - $ref: '#/components/parameters/doiParam'
        - $ref: '#/components/parameters/doiShouldParam'
        - $ref: '#/components/parameters/fundingIdentifierNotParam'
        - $ref: '#/components/parameters/fundingIdentifierParam'
        - $ref: '#/components/parameters/fundingIdentifierShouldParam'
        - $ref: '#/components/parameters/fundingParam'
        - $ref: '#/components/parameters/fundingSourceNotParam'
        - $ref: '#/components/parameters/fundingSourceParam'
        - $ref: '#/components/parameters/fundingSourceShouldParam'
        - $ref: '#/components/parameters/grantIdentifierNotParam'
        - $ref: '#/components/parameters/grantIdentifierParam'
        - $ref: '#/components/parameters/grantIdentifierShouldParam'
        - $ref: '#/components/parameters/hasFileParam'
        - $ref: '#/components/parameters/idNotParam'
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/idShouldParam'
        - $ref: '#/components/parameters/instanceTypeNotParam'
        - $ref: '#/components/parameters/instanceTypeParam'
        - $ref: '#/components/parameters/instanceTypeShouldParam'
        - $ref: '#/components/parameters/institutionNotParam'
        - $ref: '#/components/parameters/institutionParam'
        - $ref: '#/components/parameters/institutionShouldParam'
        - $ref: '#/components/parameters/isbnNotParam'
        - $ref: '#/components/parameters/isbnParam'
        - $ref: '#/components/parameters/isbnShouldParam'
        - $ref: '#/components/parameters/issnNotParam'
        - $ref: '#/components/parameters/issnParam'
        - $ref: '#/components/parameters/issnShouldParam'
        - $ref: '#/components/parameters/licenseNotParam'
        - $ref: '#/components/parameters/licenseParam'
        - $ref: '#/components/parameters/licenseShouldParam'
        - $ref: '#/components/parameters/modifiedBeforeParam'
        - $ref: '#/components/parameters/modifiedSinceParam'
        - $ref: '#/components/parameters/orcidNotParam'
        - $ref: '#/components/parameters/orcidParam'
        - $ref: '#/components/parameters/orcidShouldParam'
        - $ref: '#/components/parameters/parentPublicationParam'
        - $ref: '#/components/parameters/parentPublicationShouldParam'
        - $ref: '#/components/parameters/projectNotParam'
        - $ref: '#/components/parameters/projectParam'
        - $ref: '#/components/parameters/projectShouldParam'
        - $ref: '#/components/parameters/publicationLanguageNotParam'
        - $ref: '#/components/parameters/publicationLanguageParam'
        - $ref: '#/components/parameters/publicationLanguageShouldParam'
        - $ref: '#/components/parameters/publicationYearBeforeParam'
        - $ref: '#/components/parameters/publicationYearParam'
        - $ref: '#/components/parameters/publicationYearShouldParam'
        - $ref: '#/components/parameters/publicationYearSinceParam'
        - $ref: '#/components/parameters/publishedBeforeParam'
        - $ref: '#/components/parameters/publishedBetweenParam'
        - $ref: '#/components/parameters/publishedSinceParam'
        - $ref: '#/components/parameters/publisherIdNotParam'
        - $ref: '#/components/parameters/publisherIdParam'
        - $ref: '#/components/parameters/publisherIdShouldParam'
        - $ref: '#/components/parameters/publisherNotParam'
        - $ref: '#/components/parameters/publisherParam'
        - $ref: '#/components/parameters/publisherShouldParam'
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/scientificReportingPeriodBeforeParam'
        - $ref: '#/components/parameters/scientificReportingPeriodSinceParam'
        - $ref: '#/components/parameters/scopusIdentifierParam'
        - $ref: '#/components/parameters/seriesNotParam'
        - $ref: '#/components/parameters/seriesParam'
        - $ref: '#/components/parameters/seriesShouldParam'
        - $ref: '#/components/parameters/statusNotParam'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/statusShouldParam'
        - $ref: '#/components/parameters/tagsNotParam'
        - $ref: '#/components/parameters/tagsParam'
        - $ref: '#/components/parameters/tagsShouldParam'
        - $ref: '#/components/parameters/titleNotParam'
        - $ref: '#/components/parameters/titleParam'
        - $ref: '#/components/parameters/titleShouldParam'
        - $ref: '#/components/parameters/topLevelOrganizationParam'
        - $ref: '#/components/parameters/unitNotParam'
        - $ref: '#/components/parameters/unitParam'
        - $ref: '#/components/parameters/unitShouldParam'
        - $ref: '#/components/parameters/userAffiliationNotParam'
        - $ref: '#/components/parameters/userAffiliationParam'
        - $ref: '#/components/parameters/userAffiliationShouldParam'
        - $ref: '#/components/parameters/userNotParam'
        - $ref: '#/components/parameters/userParam'
        - $ref: '#/components/parameters/userShouldParam'
        - $ref: '#/components/parameters/langParam'
        - $ref: '#/components/parameters/fieldsParam'
        - $ref: '#/components/parameters/fromParam'
        - $ref: '#/components/parameters/sizeParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/excludeSubunits'
        - $ref: '#/components/parameters/scientificValueParam'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchResourcesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedPublicationSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /resources/export:
    get:
      tags:
        - external
      description: '<h3>Export for up to 10.000 public available publications by given criteria</h3>
      <p>All parameters documented with <code>snake_case</code>, but <code>camelCase</code> is also accepted. 
      They accept more than one value, each value must be separated by a <code>comma</code>. 
      If you use <code>space</code> between search phrases, it will usually be interpreted as words that should be found in the text.
      The more hits it gets, the closer to the top of search result an item will be.</p>'
      parameters:
        - $ref: '#/components/parameters/abstractNotParam'
        - $ref: '#/components/parameters/abstractParam'
        - $ref: '#/components/parameters/abstractShouldParam'
        - $ref: '#/components/parameters/categoryNotParam'
        - $ref: '#/components/parameters/categoryParam'
        - $ref: '#/components/parameters/categoryShouldParam'
        - $ref: '#/components/parameters/contextTypeNotParam'
        - $ref: '#/components/parameters/contextTypeParam'
        - $ref: '#/components/parameters/contextTypeShouldParam'
        - $ref: '#/components/parameters/contributorNameNotParam'
        - $ref: '#/components/parameters/contributorNameParam'
        - $ref: '#/components/parameters/contributorNameShouldParam'
        - $ref: '#/components/parameters/contributorNotParam'
        - $ref: '#/components/parameters/contributorParam'
        - $ref: '#/components/parameters/contributorShouldParam'
        - $ref: '#/components/parameters/courseNotParam'
        - $ref: '#/components/parameters/courseParam'
        - $ref: '#/components/parameters/courseShouldParam'
        - $ref: '#/components/parameters/createdBeforeParam'
        - $ref: '#/components/parameters/createdSinceParam'
        - $ref: '#/components/parameters/cristinIdentifierParam'
        - $ref: '#/components/parameters/doiNotParam'
        - $ref: '#/components/parameters/doiParam'
        - $ref: '#/components/parameters/doiShouldParam'
        - $ref: '#/components/parameters/fundingIdentifierNotParam'
        - $ref: '#/components/parameters/fundingIdentifierParam'
        - $ref: '#/components/parameters/fundingIdentifierShouldParam'
        - $ref: '#/components/parameters/fundingParam'
        - $ref: '#/components/parameters/fundingSourceNotParam'
        - $ref: '#/components/parameters/fundingSourceParam'
        - $ref: '#/components/parameters/fundingSourceShouldParam'
        - $ref: '#/components/parameters/grantIdentifierNotParam'
        - $ref: '#/components/parameters/grantIdentifierParam'
        - $ref: '#/components/parameters/grantIdentifierShouldParam'
        - $ref: '#/components/parameters/hasFileParam'
        - $ref: '#/components/parameters/idNotParam'
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/idShouldParam'
        - $ref: '#/components/parameters/instanceTypeNotParam'
        - $ref: '#/components/parameters/instanceTypeParam'
        - $ref: '#/components/parameters/instanceTypeShouldParam'
        - $ref: '#/components/parameters/institutionNotParam'
        - $ref: '#/components/parameters/institutionParam'
        - $ref: '#/components/parameters/institutionShouldParam'
        - $ref: '#/components/parameters/isbnNotParam'
        - $ref: '#/components/parameters/isbnParam'
        - $ref: '#/components/parameters/isbnShouldParam'
        - $ref: '#/components/parameters/issnNotParam'
        - $ref: '#/components/parameters/issnParam'
        - $ref: '#/components/parameters/issnShouldParam'
        - $ref: '#/components/parameters/licenseNotParam'
        - $ref: '#/components/parameters/licenseParam'
        - $ref: '#/components/parameters/licenseShouldParam'
        - $ref: '#/components/parameters/modifiedBeforeParam'
        - $ref: '#/components/parameters/modifiedSinceParam'
        - $ref: '#/components/parameters/orcidNotParam'
        - $ref: '#/components/parameters/orcidParam'
        - $ref: '#/components/parameters/orcidShouldParam'
        - $ref: '#/components/parameters/parentPublicationParam'
        - $ref: '#/components/parameters/parentPublicationShouldParam'
        - $ref: '#/components/parameters/projectNotParam'
        - $ref: '#/components/parameters/projectParam'
        - $ref: '#/components/parameters/projectShouldParam'
        - $ref: '#/components/parameters/publicationLanguageNotParam'
        - $ref: '#/components/parameters/publicationLanguageParam'
        - $ref: '#/components/parameters/publicationLanguageShouldParam'
        - $ref: '#/components/parameters/publicationYearBeforeParam'
        - $ref: '#/components/parameters/publicationYearParam'
        - $ref: '#/components/parameters/publicationYearShouldParam'
        - $ref: '#/components/parameters/publicationYearSinceParam'
        - $ref: '#/components/parameters/publishedBeforeParam'
        - $ref: '#/components/parameters/publishedBetweenParam'
        - $ref: '#/components/parameters/publishedSinceParam'
        - $ref: '#/components/parameters/publisherIdNotParam'
        - $ref: '#/components/parameters/publisherIdParam'
        - $ref: '#/components/parameters/publisherIdShouldParam'
        - $ref: '#/components/parameters/publisherNotParam'
        - $ref: '#/components/parameters/publisherParam'
        - $ref: '#/components/parameters/publisherShouldParam'
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/scientificReportingPeriodBeforeParam'
        - $ref: '#/components/parameters/scientificReportingPeriodSinceParam'
        - $ref: '#/components/parameters/scopusIdentifierParam'
        - $ref: '#/components/parameters/seriesNotParam'
        - $ref: '#/components/parameters/seriesParam'
        - $ref: '#/components/parameters/seriesShouldParam'
        - $ref: '#/components/parameters/statusNotParam'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/statusShouldParam'
        - $ref: '#/components/parameters/tagsNotParam'
        - $ref: '#/components/parameters/tagsParam'
        - $ref: '#/components/parameters/tagsShouldParam'
        - $ref: '#/components/parameters/titleNotParam'
        - $ref: '#/components/parameters/titleParam'
        - $ref: '#/components/parameters/titleShouldParam'
        - $ref: '#/components/parameters/topLevelOrganizationParam'
        - $ref: '#/components/parameters/unitNotParam'
        - $ref: '#/components/parameters/unitParam'
        - $ref: '#/components/parameters/unitShouldParam'
        - $ref: '#/components/parameters/userAffiliationNotParam'
        - $ref: '#/components/parameters/userAffiliationParam'
        - $ref: '#/components/parameters/userAffiliationShouldParam'
        - $ref: '#/components/parameters/userNotParam'
        - $ref: '#/components/parameters/userParam'
        - $ref: '#/components/parameters/userShouldParam'
        - $ref: '#/components/parameters/langParam'
        - $ref: '#/components/parameters/fieldsParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/excludeSubunits'
        - $ref: '#/components/parameters/scientificValueParam'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExportResourcesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "302":
          description: Redirect to exported data
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /import-candidates2:
    get:
      description: "Search for import candidates by given criteria"
      parameters:
        - $ref: '#/components/parameters/additionalIdentifiersParam'
        - $ref: '#/components/parameters/additionalIdentifiersNotParam'
        - $ref: '#/components/parameters/categoryParam'
        - $ref: '#/components/parameters/categoryNotParam'
        - $ref: '#/components/parameters/createdDateParam'
        - $ref: '#/components/parameters/contributorParam'
        - $ref: '#/components/parameters/contributorNotParam'
        - $ref: '#/components/parameters/collaborationTypeParam'
        - $ref: '#/components/parameters/collaborationTypeNotParam'
        - $ref: '#/components/parameters/cristinIdentifierParam'
        - $ref: '#/components/parameters/doiParam'
        - $ref: '#/components/parameters/doiNotParam'
        - $ref: '#/components/parameters/fieldsParam'
        - $ref: '#/components/parameters/hasFileParam'
        - $ref: '#/components/parameters/fromParam'
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/idNotParam'
        - $ref: '#/components/parameters/importStatusParam'
        - $ref: '#/components/parameters/importStatusNotParam'
        - $ref: '#/components/parameters/langParam'
        - $ref: '#/components/parameters/licenseParam'
        - $ref: '#/components/parameters/licenseNotParam'
        - $ref: '#/components/parameters/orderParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/publicationYearParam'
        - $ref: '#/components/parameters/publicationYearBeforeParam'
        - $ref: '#/components/parameters/publicationYearSinceParam'
        - $ref: '#/components/parameters/publisherParam'
        - $ref: '#/components/parameters/publisherNotParam'
        - $ref: '#/components/parameters/queryParam'
        - $ref: '#/components/parameters/scopusIdentifierParam'
        - $ref: '#/components/parameters/sizeParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/topLevelOrganizationParam'
        - $ref: '#/components/parameters/topLevelOrganizationNotParam'
        - $ref: '#/components/parameters/titleParam'
        - $ref: '#/components/parameters/titleNotParam'
        - $ref: '#/components/parameters/typeParam'
        - $ref: '#/components/parameters/typeNotParam'
        - $ref: '#/components/parameters/searchAllParam'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchImportCandidates2Function.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedImportCandidateSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"


components:
  parameters:
    abstractParam:
      name: abstract
      in: query
      description: "Returns document with these words in the abstract."
      required: false
      style: form
      explode: true
      examples:
        documents with all words:
          value: covid threat
        documents with either word:
          value: covid, threat
      schema:
        type: string
    abstractNotParam:
      name: abstract_not
      in: query
      description: "Returns document without these words in the abstract."
      required: false
      style: form
      explode: true
      examples:
        documents with all words:
          value: covid threat
        documents with either word:
          value: covid, threat
      schema:
        type: string
    abstractShouldParam:
      name: abstract_should
      in: query
      description: "Returns document with these words in the abstract."
      required: false
      style: form
      explode: true
      examples:
        documents with all words:
          value: covid threat
        documents with either word:
          value: covid, threat
      schema:
        type: string
    additionalIdentifiersParam:
      name: additional_identifiers
      in: query
      description: "Returns document with identifier value."
      example: "2-s2.0-85120179645"
      required: false
      style: form
      explode: true
      schema:
        type: string
    additionalIdentifiersNotParam:
      name: additional_identifiers
      in: query
      description: "Returns document without identifier value."
      example: "2-s2.0-85120179645"
      required: false
      style: form
      explode: true
      schema:
        type: string
    aggregationParam:
      name: aggregation
      in: query
      description: "Aggregations to include in the search."
      required: false
      style: form
      explode: true
      examples:
        all aggregations:
          value: all
        separate keys aggregations:
          value: [ associatedArtifact, entityDescription, status, scientificIndex ]
        one key aggregations:
          value: "fundingSource, status, topLevelOrganisations, scientificIndex"
      schema:
        $ref: '#/components/schemas/AggregationNames'
    collaborationTypeParam:
      name: collaboration_type
      in: query
      description: "Returns document with enum."
      example: "Collaborative"
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/CollaborationValues'
    collaborationTypeNotParam:
      name: collaboration_type_not
      in: query
      description: "Returns document without enum."
      example: "Collaborative"
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/CollaborationValues'
    contextTypeNotParam:
      name: context_type_not
      in: query
      description: "Returns document without these contextTypes."
      required: false
      style: form
      explode: true
      example: "Anthology"
      schema:
        $ref: '#/components/schemas/ContextValues'
    contextTypeParam:
      name: context_type
      in: query
      description: "Returns document with these contextTypes."
      required: false
      style: form
      explode: true
      example: "Degree"
      schema:
        $ref: '#/components/schemas/ContextValues'
    contextTypeShouldParam:
      name: context_type_should
      in: query
      description: "Returns document with these contextTypes."
      required: false
      style: form
      explode: true
      example: Book
      schema:
        $ref: '#/components/schemas/ContextValues'
    contributorNameNotParam:
      name: contributor_name_not
      in: query
      description: "Returns document without Author's name."
      example: "John Doe"
      required: false
      style: form
      explode: true
      schema:
        type: string
    contributorNameParam:
      name: contributor_name
      in: query
      description: "Returns document with Author's name."
      example: "John Doe"
      required: false
      style: form
      explode: true
      schema:
        type: string
    contributorNameShouldParam:
      name: contributor_name_should
      in: query
      description: "Returns document with similar Author names."
      example: "John Doe"
      required: false
      style: form
      explode: true
      schema:
        type: string
    contributorParam:
      name: contributor
      in: query
      description: "Returns document with Author's id(URI)."
      example: 'https://api.dev.nva.aws.unit.no/cristin/person/1306838'
      required: false
      style: form
      explode: true
      schema:
        type: string
    contributorNotParam:
      name: contributor_not
      in: query
      description: "Returns document without Author's ids(URI)."
      example: 'https://api.dev.nva.aws.unit.no/cristin/person/1306838'
      required: false
      style: form
      explode: true
      schema:
        type: string
    contributorShouldParam:
      name: contributor_should
      in: query
      description: "Returns document with Author's ids(URI)."
      example: '1306838'
      required: false
      style: form
      explode: true
      schema:
        type: string
    createdBeforeParam:
      name: created_before
      in: query
      description: "Results created before and inclusive the given date, (yyyy-mm-dd)."
      example: "2005-03-17"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    createdSinceParam:
      name: created_since
      in: query
      description: "Results created since and inclusive the given date, (yyyy-mm-dd)."
      example: "2005-03-17"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    courseParam:
      name: course
      in: query
      description: "Returns documents with this course code."
      example: "GENV395"
      required: false
      style: form
      explode: true
      schema:
        type: string
    courseNotParam:
      name: course_not
      in: query
      description: "Returns documents without this course code."
      example: "GENV395"
      required: false
      style: form
      explode: true
      schema:
        type: string
    courseShouldParam:
      name: course_should
      in: query
      description: "Returns documents with these course codes."
      example: "GENV395"
      required: false
      style: form
      explode: true
      schema:
        type: string
    cristinIdentifierParam:
      name: cristin_identifier
      in: query
      description: "Returns documents with the cristin identifier."
      example: "1234"
      required: false
      style: form
      explode: true
      schema:
        type: string
    scopusIdentifierParam:
      name: scopus_identifier
      in: query
      description: "Returns documents with the cristin identifier."
      example: "1234"
      required: false
      style: form
      explode: true
      schema:
        type: string
    doiParam:
      name: doi
      in: query
      description: "Returns document with this DOI id."
      example: "10.1000/123456"
      required: false
      style: form
      explode: true
      schema:
        type: string
    doiNotParam:
      name: doi_not
      in: query
      description: "Returns document without these DOI ids."
      example: "10.1000/123456"
      required: false
      style: form
      explode: true
      schema:
        type: string
    doiShouldParam:
      name: doi_should
      in: query
      description: "Returns document with these DOI ids."
      example: "10.1000/123456"
      required: false
      style: form
      explode: true
      schema:
        type: string
    scientificValueParam:
      name: scientific_value
      in: query
      description: "Returns document with provided scientific values separated by comma."
      example: "LevelOne,LevelTwo"
      required: false
      style: form
      explode: true
      schema:
        type: string
    fieldsParam:
      name: fields
      in: query
      description: "'fields=all' will search all fields in documents, or you can specify a comma separated list of fields to search in."
      example: category,contributor,funding
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum: [ all, category,contributor,created_before,created_since,doi,funding,funding_source,id,institution ,isbn,issn,orcid,modified_before,modified_since,project_code,published_before,published_since,title,unit,user,year_reported ]
    fundingParam:
      name: funding
      in: query
      description: "Funding source code e.g: NFR, and project_code together separated by ':'."
      example: "NFR:1234"
      required: false
      style: form
      explode: true
      schema:
        type: string
    fundingIdentifierParam:
      name: funding_identifier
      in: query
      description: "Returns documents with the funding identifier, also known as grant identifier."
      example: "1234"
      required: false
      style: form
      explode: true
      schema:
        type: string
    fundingIdentifierNotParam:
      name: funding_identifier_not
      in: query
      description: "Returns documents without the funding identifier, also known as grant identifier."
      example: "1234"
      required: false
      style: form
      explode: true
      schema:
        type: string
    fundingIdentifierShouldParam:
      name: funding_identifier_should
      in: query
      description: "Returns documents with the funding identifiers, also known as grant identifiers."
      example: "1234,4321"
      required: false
      style: form
      explode: true
      schema:
        type: string
    fundingSourceParam:
      name: funding_source
      in: query
      description: "Returns document with this funding source code or project code."
      example: "NFR"
      required: false
      style: form
      explode: true
      schema:
        type: string
    fundingSourceNotParam:
      name: funding_source_not
      in: query
      description: "Returns document without these funding source codes."
      example: "NFR"
      required: false
      style: form
      explode: true
      schema:
        type: string
    fundingSourceShouldParam:
      name: funding_source_should
      in: query
      description: "Returns document with these funding source codes."
      example: "NFR"
      required: false
      style: form
      explode: true
      schema:
        type: string
    grantIdentifierParam:
      name: grant_id
      in: query
      description: "Returns documents with the grant id, also known as funding identifier."
      example: "1234"
      required: false
      style: form
      explode: true
      schema:
        type: string
    grantIdentifierNotParam:
      name: grant_id_not
      in: query
      description: "Returns documents without the grant id, also known as funding identifier."
      example: "1234"
      required: false
      style: form
      explode: true
      schema:
        type: string
    grantIdentifierShouldParam:
      name: grant_id_should
      in: query
      description: "Returns documents with the grant id, also known as funding identifiers."
      example: "1234,4321"
      required: false
      style: form
      explode: true
      schema:
        type: string
    hasFileParam:
      name: has_file
      in: query
      description: "Returns documents with visibleForNonOwner=true/false."
      example: "true"
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        enum: [ true, false ]
    idParam:
      name: id
      in: query
      description: "Returns document with the identifier (UUID)."
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
    idNotParam:
      name: id_not
      in: query
      description: "Returns document without these identifiers (UUID)."
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
    idShouldParam:
      name: id_should
      in: query
      description: "Returns document with these identifiers (UUID)."
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
    importStatusParam:
      name: import_status
      in: query
      description: "Returns document with this importStatus."
      example: NOT_IMPORTED
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/ImportStatusValues"
    importStatusNotParam:
      name: import_status_not
      in: query
      description: "Returns document with this importStatus."
      example: NOT_IMPORTED
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/ImportStatusValues"
    instanceTypeParam:
      name: instance_type
      in: query
      description: "Returns document with this instanceType."
      example: JournalArticle
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    instanceTypeNotParam:
      name: instance_type_not
      in: query
      description: "Returns document without this instanceType."
      example: JournalArticle
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    instanceTypeShouldParam:
      name: instance_type_should
      in: query
      description: "Returns document with these instanceTypes."
      example: JournalArticle
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    institutionParam:
      name: institution
      in: query
      description: "Returns document with this institution id (URI)."
      examples:
        Id:
          value: "185"
        Acronyms:
          value: "UiO"
        Name:
          value: "University of Oslo"
      required: false
      style: form
      explode: true
      schema:
        type: string
    institutionNotParam:
      name: institution_not
      in: query
      description: "Returns document without Ids, names or acronyms of the institution the contributors belong to."
      examples:
        Id:
          value: "185"
        Acronyms:
          value: "UiO"
        Name:
          value: "University of Oslo"
      required: false
      style: form
      explode: true
      schema:
        type: string
    institutionShouldParam:
      name: institution_should
      in: query
      description: "Returns document with Ids, names or acronyms of the institution the contributors belong to."
      examples:
        Id:
          value: "185"
        Acronyms:
          value: "UiO"
        Name:
          value: "University of Oslo"
      required: false
      style: form
      explode: true
      schema:
        type: string
    isbnParam:
      name: isbn
      in: query
      description: "Returns document with this ISBN id"
      example: "978-3-16-148410-0"
      required: false
      style: form
      explode: true
      schema:
        type: string
    isbnNotParam:
      name: isbn_not
      in: query
      description: "Returns document without these ISBN ids."
      example: "978-3-16-148410-0"
      required: false
      style: form
      explode: true
      schema:
        type: string
    isbnShouldParam:
      name: isbn_should
      in: query
      description: "Returns document with these ISBN ids."
      example: "978-3-16-148410-0"
      required: false
      style: form
      explode: true
      schema:
        type: string
    issnParam:
      name: issn
      in: query
      description: "Returns document with this issn"
      example: "1234-5678"
      required: false
      style: form
      explode: true
      schema:
        type: string
    issnNotParam:
      name: issn_not
      in: query
      description: "Returns document without these issn."
      example: "1234-5678"
      required: false
      style: form
      explode: true
      schema:
        type: string
    issnShouldParam:
      name: issn_should
      in: query
      description: "Returns document with these issn."
      example: "1234-5678"
      required: false
      style: form
      explode: true
      schema:
        type: string
    licenseNotParam:
      name: license_not
      in: query
      description: "Returns document without this license key (without version)."
      required: false
      style: form
      explode: true
      example: "CC BY-NC-ND"
      schema:
        $ref: "#/components/schemas/LicenseValues"
    licenseParam:
      name: license
      in: query
      description: "Returns document with this license key (without version)."
      required: false
      style: form
      explode: true
      example: "CC BY-NC-ND"
      schema:
        $ref: "#/components/schemas/LicenseValues"
    licenseShouldParam:
      name: license_should
      in: query
      description: "Returns document with these license key (without version)."
      required: false
      style: form
      explode: true
      example: "CC BY-NC-ND"
      schema:
        $ref: "#/components/schemas/LicenseValues"
    modifiedBeforeParam:
      name: modified_before
      in: query
      description: "Results modified before and inclusive the given date, (yyyy-mm-dd)."
      example: "2005-03-17"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    modifiedSinceParam:
      name: modified_since
      in: query
      description: "Results modified since and inclusive the given date, (yyyy-mm-dd)."
      example: "2005-03-17"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    orcidParam:
      name: orcid
      in: query
      description: "Returns document with this ORCID id."
      example: "0000-0002-1825-0097"
      required: false
      style: form
      explode: true
      schema:
        type: string
    orcidNotParam:
      name: orcid_not
      in: query
      description: "Returns document without these ORCID ids."
      example: "0000-0002-1825-0097"
      required: false
      style: form
      explode: true
      schema:
        type: string
    orcidShouldParam:
      name: orcid_should
      in: query
      description: "Returns document with these ORCID ids."
      example: "0000-0002-1825-0097"
      required: false
      style: form
      explode: true
      schema:
        type: string
    parentPublicationParam:
      name: parent_publication
      in: query
      description: "Returns document with this parentPublication."
      required: false
      style: form
      explode: true
      schema:
        type: string
    parentPublicationShouldParam:
      name: parent_publication_should
      in: query
      description: "Returns document with these parentPublications."
      required: false
      style: form
      explode: true
      schema:
        type: string
    projectParam:
      name: project
      in: query
      description: "Returns document with this project id (URI)."
      example: "NFR"
      required: false
      style: form
      explode: true
      schema:
        type: string
    projectNotParam:
      name: project_not
      in: query
      description: "Returns document without these project ids (URI)."
      example: "NFR"
      required: false
      style: form
      explode: true
      schema:
        type: string
    projectShouldParam:
      name: project_should
      in: query
      description: "Returns document with these project ids (URI)."
      example: "NFR"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationLanguageParam:
      name: publication_language
      in: query
      description: "Returns document with these publication languages (URI)."
      example: "http://lexvo.org/id/iso639-3/nob"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationLanguageNotParam:
      name: publication_language_not
      in: query
      description: "Returns document without these publication languages (URI)."
      example: "http://lexvo.org/id/iso639-3/nob"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationLanguageShouldParam:
      name: publication_language_should
      in: query
      description: "Returns document with these publication languages codes ()."
      example: "nob, eng, nor, etc"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationYearParam:
      name: publication_year
      in: query
      description: "Returns document with this publication year."
      example: "2022"
      required: false
      style: form
      explode: true
      schema:
        type: number
    publicationYearBeforeParam:
      name: publication_year_before
      in: query
      description: "Returns document with publication year prior to value."
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    publicationYearSinceParam:
      name: publication_year_since
      in: query
      description: "Returns document with publication year starting from value."
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    publicationYearShouldParam:
      name: publication_year_should
      in: query
      description: "Returns document with any of these publication years."
      example: "2022 2023"
      required: false
      style: form
      explode: true
      schema:
        type: number
    publishedBeforeParam:
      name: published_before
      in: query
      description: "Results published before and inclusive the given date, (yyyy-mm-dd)"
      example: "2005-03-17"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    publishedBetweenParam:
      name: published_between
      in: query
      description: "Returns document with date between values."
      example: "2005-03-17, 2010-01-01"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    publishedSinceParam:
      name: published_since
      in: query
      description: "Results published since and inclusive the given date, (yyyy-mm-dd)."
      example: "2005-03-17"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    publisherIdNotParam:
      name: publisher_id_not
      in: query
      description: "Returns document without this Id."
      required: false
      style: form
      explode: true
      schema:
        type: string
    publisherIdParam:
      name: publisher_id
      in: query
      description: "Returns document with this Id."
      required: false
      style: form
      explode: true
      schema:
        type: string
    publisherIdShouldParam:
      name: publisher_id_should
      in: query
      description: "Returns document with these Ids."
      required: false
      style: form
      explode: true
      schema:
        type: string
    publisherNotParam:
      name: publisher_not
      in: query
      description: "Returns document without this publisher."
      required: false
      style: form
      explode: true
      schema:
        type: string
    publisherParam:
      name: publisher
      in: query
      description: "Returns document with this publisher."
      required: false
      style: form
      explode: true
      schema:
        type: string
    publisherShouldParam:
      name: publisher_should
      in: query
      description: "Returns document with these publishers."
      required: false
      style: form
      explode: true
      schema:
        type: string
    searchAllParam:
      name: search_all
      in: query
      description: "Returns document with this search phrase"
      required: false
      style: form
      explode: true
      schema:
        type: string
    seriesNotParam:
      name: series_not
      in: query
      description: "Returns document without this ID/name."
      required: false
      style: form
      explode: true
      schema:
        type: string
    seriesParam:
      name: series
      in: query
      description: "Returns document with this ID/name."
      required: false
      style: form
      explode: true
      schema:
        type: string
    seriesShouldParam:
      name: series_should
      in: query
      description: "Returns document with these ID/name."
      required: false
      style: form
      explode: true
      schema:
        type: string
    statusParam:
      name: status
      in: query
      description: "Returns documents with given status."
      example: "PUBLISHED"
      required: false
      style: form
      explode: true
      schema:
        type: string
    statusNotParam:
      name: status_not
      in: query
      description: "Returns documents without given status."
      example: "PUBLISHED"
      required: false
      style: form
      explode: true
      schema:
        type: string
    statusShouldParam:
      name: status_should
      in: query
      description: "Returns documents without any of the given statuses."
      example: "PUBLISHED"
      required: false
      style: form
      explode: true
      schema:
        type: string
    tagsParam:
      name: tags
      in: query
      description: "Returns document with these tags."
      required: false
      style: form
      explode: true
      schema:
        type: string
    tagsNotParam:
      name: tags_not
      in: query
      description: "Returns document without these tags."
      required: false
      style: form
      explode: true
      schema:
        type: string
    tagsShouldParam:
      name: tags_should
      in: query
      description: "Returns document with these tags."
      required: false
      style: form
      explode: true
      schema:
        type: string
    titleParam:
      name: title
      in: query
      description: "Returns document with these words in the title."
      example: "covid-19 unsafe"
      required: false
      style: form
      explode: true
      schema:
        type: string
    titleNotParam:
      name: title_not
      in: query
      description: "Returns document without these words in the title."
      example: "covid-19 safe"
      required: false
      style: form
      explode: true
      schema:
        type: string
    titleShouldParam:
      name: title_should
      in: query
      description: "Returns document with any of these words in the title."
      example: "covid-19 save"
      required: false
      style: form
      explode: true
      schema:
        type: string
    topLevelOrganizationParam:
      name: top_level_organization
      in: query
      description: "Returns documents with this reference."
      required: false
      style: form
      explode: true
      schema:
        type: string
    topLevelOrganizationNotParam:
      name: top_level_organization_not
      in: query
      description: "Returns documents without this reference."
      required: false
      style: form
      explode: true
      schema:
        type: string
    unitParam:
      name: unit
      in: query
      description: "Returns document with these words in the Id."
      example: 185.53.18.10
      required: false
      style: form
      explode: true
      schema:
        type: string
    unitNotParam:
      name: unit_not
      in: query
      description: "Returns document without these words in the Id."
      example: 185.53.18.10
      required: false
      style: form
      explode: true
      schema:
        type: string
    unitShouldParam:
      name: unit_should
      in: query
      description: "Returns document with any of these words in the Id."
      example: 185.53.18.10
      required: false
      style: form
      explode: true
      schema:
        type: string
    userParam:
      name: user
      in: query
      description: "Returns document with this resource owner (user id (URI))."
      example: "askeladd:185"
      required: false
      style: form
      explode: true
      schema:
        type: string
    userNotParam:
      name: user_not
      in: query
      description: "Returns document without these resource owners (user id (URI))."
      example: "askeladd:185"
      required: false
      style: form
      explode: true
      schema:
        type: string
    userShouldParam:
      name: user_should
      in: query
      description: "Returns document with any of these resource owners (user id (URI))."
      example: "askeladd:185"
      required: false
      style: form
      explode: true
      schema:
        type: string
    scientificReportingPeriodSinceParam:
      name: scientific_report_period_since
      in: query
      description: "Returns document with scientific reporting year after this value."
      example: "2011"
      required: false
      style: form
      explode: true
      schema:
        type: string
    scientificReportingPeriodBeforeParam:
      name: scientific_report_period_before
      in: query
      description: "Returns document with scientific reporting year before this value."
      example: "2023"
      required: false
      style: form
      explode: true
      schema:
        type: string
    excludeSubunits:
      name: exclude_subunits
      in: query
      description: "Exclude sub-units of the provided viewingScope"
      example: 'true'
      required: false
      style: form
      explode: true
      schema:
        type: boolean
    userAffiliationParam:
      name: user_affiliation
      in: query
      description: "Returns document with these owner affiliations."
      required: false
      style: form
      explode: true
      schema:
        type: string
    userAffiliationNotParam:
      name: user_affiliation_not
      in: query
      description: "Returns document without these owner affiliations."
      required: false
      style: form
      explode: true
      schema:
        type: string
    userAffiliationShouldParam:
      name: user_affiliation_should
      in: query
      description: "Returns document with these owner affiliations."
      required: false
      style: form
      explode: true
      schema:
        type: string
    assigneeParam:
      name: assignee
      in: query
      description: "Returns document with these assignees"
      required: false
      style: form
      explode: true
      schema:
        type: string
    assigneeNotParam:
      name: assignee_not
      in: query
      description: "Returns document without these assignees"
      required: false
      style: form
      explode: true
      schema:
        type: string
    createdDateParam:
      name: created_date
      in: query
      description: "Returns document with these created dates"
      required: false
      style: form
      explode: true
      schema:
        type: string
    customerIdParam:
      name: customer_id
      in: query
      description: "Returns document with these customer ids"
      required: false
      style: form
      explode: true
      schema:
        type: string
    customerIdNotParam:
      name: customer_id_not
      in: query
      description: "Returns document without these customer ids"
      required: false
      style: form
      explode: true
      schema:
        type: string
    finalizedByParam:
      name: finalized_by
      in: query
      description: "Returns document with these finalized by users"
      required: false
      style: form
      explode: true
      schema:
        type: string
    finalizedByNotParam:
      name: finalized_by_not
      in: query
      description: "Returns document without these finalized by users"
      required: false
      style: form
      explode: true
      schema:
        type: string
    messagesParam:
      name: messages
      in: query
      description: "Returns document with these words in the message"
      required: false
      style: form
      explode: true
      schema:
        type: string
    messagesNotParam:
      name: messages_not
      in: query
      description: "Returns document without these words in the message"
      required: false
      style: form
      explode: true
      schema:
        type: string
    modifiedDateParam:
      name: modified_date
      in: query
      description: "Returns document with these modified dates"
      required: false
      style: form
      explode: true
      schema:
        type: string
    organizationIdParam:
      name: organization_id
      in: query
      description: "Returns document with these organization ids"
      required: false
      style: form
      explode: true
      schema:
        type: string
    organizationIdNotParam:
      name: organization_id_not
      in: query
      description: "Returns document without these organization ids"
      required: false
      style: form
      explode: true
      schema:
        type: string
    ownerParam:
      name: owner
      in: query
      description: "Returns document with these owners"
      required: false
      style: form
      explode: true
      schema:
        type: string
    ownerNotParam:
      name: owner_not
      in: query
      description: "Returns document without these owners"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationIdParam:
      name: publication_id
      in: query
      description: "Returns document with these publication ids"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationIdNotParam:
      name: publication_id_not
      in: query
      description: "Returns document without these publication ids"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationModifiedDateParam:
      name: publication_modified_date
      in: query
      description: "Returns document with these publication modified dates"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationOwnerParam:
      name: publication_owner
      in: query
      description: "Returns document with these publication owners"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationOwnerNotParam:
      name: publication_owner_not
      in: query
      description: "Returns document without these publication owners"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationStatusParam:
      name: publication_status
      in: query
      description: "Returns document with these publication statuses"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationStatusNotParam:
      name: publication_status_not
      in: query
      description: "Returns document without these publication statuses"
      required: false
      style: form
      explode: true
      schema:
        type: string
    publicationTitleParam:
      name: publication_title
      in: query
      description: "Returns document with these publication titles"
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    publicationTypeParam:
      name: publication_type
      in: query
      description: "Returns document with these types"
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    publicationTypeNotParam:
      name: publication_type_not
      in: query
      description: "Returns document without these types"
      required: false
      style: form
      explode: true
      schema:
        type: string
    typeParam:
      name: type
      in: query
      description: "Returns document with these types"
      required: false
      style: form
      explode: true
      schema:
        type: string
    typeNotParam:
      name: type_not
      in: query
      description: "Returns document without these types"
      required: false
      style: form
      explode: true
      schema:
        type: string
    viewedByParam:
      name: viewed_by
      in: query
      description: "Returns document with these viewed by users"
      required: false
      style: form
      explode: true
      schema:
        type: string
    viewedByNotParam:
      name: viewed_by_not
      in: query
      description: "Returns document without these viewed by users"
      required: false
      style: form
      explode: true
      schema:
        type: string

    #--- aliases - maybe delete?
    categoryParam:
      name: category
      in: query
      description: "Returns documents with this category code, only one category code is allowed."
      example: JournalArticle
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    categoryNotParam:
      name: category_not
      in: query
      description: "Returns documents without these category codes. Support list of Enums."
      example: JournalArticle
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    categoryShouldParam:
      name: category_should
      in: query
      description: "Returns documents with these category codes. Support list of Enums."
      example: "JournalArticle"
      required: false
      style: form
      explode: true
      schema:
        $ref: "#/components/schemas/CategoryEnum"
    #--- paging
    orderParam:
      name: order
      in: query
      description: "SortOrder is either 'asc' or 'desc'. See Search and sort Default sort order is on 'cristin_result_id' in ascending order."
      example: "asc"
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum: [ asc, desc ]
    pageParam:
      name: page
      in: query
      description: "Page number, zero based, see from and size."
      example: "0"
      required: false
      style: form
      explode: true
      schema:
        type: number
    fromParam:
      name: from
      in: query
      description: "Start result from item no. zero based [offset] is also accepted. Default is 0."
      example: "0"
      required: false
      style: form
      explode: true
      schema:
        type: number
    sizeParam:
      name: size
      in: query
      description: "Number of items returned. [per_page|perPage|results|limit] are also accepted.  Default is 15."
      example: "15"
      required: false
      style: form
      explode: true
      schema:
        type: number
    queryParam:
      name: query
      in: query
      description: "free text search, all words are searched for in all fields, only documents containing all words are returned."
      required: false
      style: form
      explode: true
      schema:
        type: string
    sortParam:
      name: sort
      in: query
      description: "Sorts on the given field. Default sort order is on 'published_date' in ascending order."
      required: false
      style: form
      explode: true
      examples:
        ascending:
          value: "category:asc"
        descending:
          value: "category:desc"
        composite:
          value: "category:asc,created_date:desc"
      schema:
        type: string
        enum:
          - category:asc
          - category:desc
          - created_date
          - modified_date
          - published_date
          - title
          - unit_id
    #--- not in use
    langParam:
      deprecated: true
      name: lang
      in: query
      description: "Two letter language code. IGNORED, here to be compatible with CristinAPI."
      required: false
      style: form
      explode: true
      schema:
        type: string

  schemas:
    Publication:
      type: object
      description: Complete Publication entity
      properties:
        abstract:
          type: string
          description: short abstract of content
        alternativeTitles:
          type: array
          description: short abstract of content
          items:
            type: string
        contributors:
          type: array
          description: List of contributing people
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        description:
          type: string
        doi:
          type: string
        id:
          type: string
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
        publicationDate:
          type: object
          properties:
            day:
              type: string
            month:
              type: string
            type:
              type: string
            year:
              type: string
        publicationType:
          type: string
        publishedDate:
          type: string
          format: date
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        reference:
          type: object
          properties:
            doi:
              type: string
            publicationContext:
              type: object
              properties:
                level:
                  type: string
                linkedContext:
                  type: string
                onlineIssn:
                  type: string
                openAccess:
                  type: boolean
                peerReviewed:
                  type: boolean
                printIssn:
                  type: string
                publisher:
                  type: string
                seriesTitle:
                  type: string
                title:
                  type: string
                type:
                  type: string
                url:
                  type: string
            publicationInstance:
              type: object
              properties:
                articleNumber:
                  type: string
                issue:
                  type: string
                pages:
                  type: object
                  properties:
                    begin:
                      type: string
                    end:
                      type: string
                    illustrated:
                      type: boolean
                    pages:
                      type: string
                    type:
                      type: string
                peerReviewed:
                  type: boolean
                textbookContent:
                  type: boolean
                type:
                  type: string
                volume:
                  type: string
            type:
              type: string
        tags:
          type: array
          items:
            type: string
        title:
          type: string
    ImportCandidate:
      type: object
      description: Complete ImportCandidate entity
      properties:
        id:
          type: string
        additionalIdentifiers:
          type: array
          description: Additional identifiers as cristinId and scopusId
          items:
            type: string
        importStatus:
          type: string
          enum:
            - IMPORTED
            - NOT_IMPORTED
            - NOT_APPLICABLE
        doi:
          type: string
        publicationYear:
          type: string
        mainTitle:
          type: string
        totalContributors:
          type: integer
        totalVerifiedContributors:
          type: integer
        organization:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        journal:
          type: object
          properties:
            id:
              type: string
        publicationInstance:
          type: object
          properties:
            articleNumber:
              type: string
            issue:
              type: string
            pages:
              type: object
              properties:
                begin:
                  type: string
                end:
                  type: string
                illustrated:
                  type: boolean
                pages:
                  type: string
                type:
                  type: string
            peerReviewed:
              type: boolean
            textbookContent:
              type: boolean
            type:
              type: string
            volume:
              type: string
    Ticket:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
        viewedBy:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
      example:
        type: GeneralSupportCase
        viewedBy:
          - user1
          - user2
        status: Pending
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
    SearchResponse:
      type: object
      description: Search meta information, with results
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          $ref: '#/components/schemas/Id'
        processingTime:
          type: integer
          description: time consumed on server in ms.
        size:
          type: integer
          description: Number of results returned from query
        aggregations:
          type: object
          description: Entity containing the different facets hit by the search.
        total:
          type: integer
          description: Total number of results from query
        took:
          type: integer
          description: Time consumed on server in ms.
    TicketSearchResponse:
      allOf: # Combines SearchResponse with Ticket hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Ticket search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/Ticket'
    PublicationSearchResponse:
      allOf: # Combines SearchResponse with Publication hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Publication search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/Publication'
    PagedSearchResponse:
      type: object
      description: Search meta information, with results
      required:
        - '@context'
        - id
        - totalHits
      properties:
        id:
          $ref: '#/components/schemas/Id'
        totalHits:
          type: integer
          description: Total number of results from query
        hits:
          type: object
        nextResults:
          type: string
          pattern: 'https:\/\/.*$'
          description: Link to next page of results, null if this is the last page
        nextSearchAfterResults:
          type: string
          pattern: 'https:\/\/.*$'
          description: Link to next page of results, based on the sort key, null if this is the last page
        previousResults:
          type: string
          pattern: 'https:\/\/.*$'
          description: Link to previous page of results, null if this is the first page
        aggregations:
          description: 'a (key, List<Facet>) map. '
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Facet'
        '@context':
          $ref: '#/components/schemas/Context'
    PagedPublicationSearchResponse:
      allOf: # Combines PagedSearchResponse with Publication hits
        - $ref: '#/components/schemas/PagedSearchResponse'
        - type: object
          required:
            - hits
      properties:
        hits:
          type: array
          description: Publication search results (numberOf = [size])
          items:
            $ref: '#/components/schemas/Publication'
    PagedImportCandidateSearchResponse:
      allOf: # Combines PagedSearchResponse with ImportCandidate hits
        - $ref: '#/components/schemas/PagedSearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: ImportCandidate search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/ImportCandidate'
    PublicationSearchCsv:
      type: string
      description: Export publication search results
      properties:
        url:
          type: string
          description: Uri(id) of the publication
        title:
          type: string
          description: Title of the publication
        publicationDate:
          type: string
          description: Publication date
        type:
          type: string
          description: Publication instance
        contributors:
          type: string
          description: List of contributors of the publication
      example: |-
        url;title;publicationDate;type;contributors
        "https://example/publication";"Title";"2020-09-02";"AcademicArticle";"Rached Fristedt,Per Arnér"
    ImportCandidateSearchResponse:
      allOf: # Combines SearchResponse with ImportCandidate hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Import candidate search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/ImportCandidate'
    Context:
      type: string
      pattern: 'https:\/\/.*$'
      description: The JSON-LD context object for the data, which describes the object in the data and allows machine processing of the data at a semantic level
    Id:
      type: string
      pattern: 'https:\/\/.*$'
      description: The URI of the object ID
    Facet:
      type: object
      properties:
        id:
          type: string
          description: The URI of the object ID
        key:
          type: string
          description: The key of the bucket
        count:
          type: integer
          description: The number of documents in the bucket
        labels:
          type: object
          description: The labels of the bucket
          additionalProperties:
            type: string
    AggregationNames:
      type: string
      enum: [ all, none ]
    CategoryEnum:
      type: string
      enum: [ AcademicArticle,AcademicChapter,AcademicLiteratureReview,AcademicMonograph,Architecture,ArtisticDesign,BookAbstracts,BookAnthology,BookMonograph,CaseReport,ChapterArticle,
              ChapterConferenceAbstract,ChapterInReport,ConferenceAbstract,ConferenceLecture,ConferencePoster,ConferenceReport,DataManagementPlan,DataSet,DegreeBachelor,DegreeLicentiate,
              DegreeMaster,DegreePhd,Encyclopedia,EncyclopediaChapter,ExhibitionCatalog,ExhibitionCatalogChapter,ExhibitionProduction,FeatureArticle,Introduction,JournalArticle,JournalCorrigendum,
              JournalInterview,JournalIssue,JournalLeader,JournalLetter,JournalReview,Lecture,LiteraryArts,MediaBlogPost,MediaFeatureArticle,MediaInterview,MediaParticipationInRadioOrTv,
              MediaReaderOpinion,MovingPicture,MusicPerformance,NonFictionChapter,NonFictionMonograph,OtherPresentation,OtherStudentWork,PerformingArts,PopularScienceArticle,PopularScienceChapter,
              PopularScienceMonograph,ProfessionalArticle,ReportBasic,ReportBookOfAbstract,ReportPolicy,ReportResearch,ReportWorkingPaper,StudyProtocol,Textbook,TextbookChapter,VisualArts ]
    CollaborationValues:
      type: string
      enum:
        - Collaborative
        - NonCollaborative
    ImportStatusValues:
      type: string
      enum:
        - IMPORTED
        - NOT_IMPORTED
    ContextValues:
      type: string
      enum: [ Anthology,Artistic,Book,Degree,Event,ExhibitionContent,Journal,MediaContribution,MediaContributionPeriodical,Report,UnconfirmedJournal,UnconfirmedMediaContributionPeriodical ]
    LicenseValues:
      type: string
      enum: [ 'CC BY', 'CC BY-NC', 'CC BY-NC-ND', 'CC BY-NC-SA', 'CC BY-ND', 'CC BY-SA', 'CC0' ]
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref:
              CognitoAuthorizerArn